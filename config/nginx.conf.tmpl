{{ $gateways := .Gateways }}
worker_processes 1;
error_log logs/error.log debug;
events {
    worker_connections 1024;
}

http {
    log_format  json  '{"@timestamp": "$time_iso8601", '
					'"remote_addr": "$remote_addr", '
					'"http_host": "$host", '
					'"status": "$status", '
					'"request_time": "$request_time", '
					'"request_method": "$request_method", '
					'"url": "$uri", '
					'"http_referer": "$http_referer", '
					'"body_size": "$body_bytes_sent", '
					'"http_x_forwarded_for": "$http_x_forwarded_for", '
					'"upstream_response_time": "$upstream_response_time", '
					'"upstream_addr": "$upstream_addr", '
					'"upstream_status": "$upstream_status", '
					'"http_scheme": "$scheme", '
					'"http_x_forwarded_proto": "$http_x_forwarded_proto", '
					'"http_user_agent": "$http_user_agent"}';
    access_log  logs/access.log  json;
    lua_shared_dict limit_req_store 100m;
    lua_shared_dict limit_conn_store 100m;
    lua_shared_dict config_store 100m;
    init_worker_by_lua_block {
        local balancer = require "balancer.balancer"
        config_type = "file"
        config_file = "./conf/config.json"
        redis_host = "127.0.0.1"
        redis_port = 6379
        redis_key = "gateway-balancer"
        balancer.init_worker()
    }

    upstream upstream_balancer {
        server 0.0.0.0;
        balancer_by_lua_block {
            local balancer = require "balancer.balancer"
            balancer.balance()
        }
    }

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

{{ range $gateway := $gateways }}
    ## start gateway: {{ $gateway.GatewayName }}
    server {
        listen {{ $gateway.ListenPort }};
        server_name {{ $gateway.Host }};

        ## start auth request
    {{- with $gateway.AuthRequest.Enable }}
        location  {{ $gateway.AuthRequest.AuthPath }} {
            proxy_pass {{ $gateway.AuthRequest.ProxyPass }};
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_connect_timeout 5;
            proxy_read_timeout 5;
            proxy_send_timeout 5;
        }
    {{- end }}
        ## end auth request

    {{ $route := $gateway.Routes }}
    {{- range $route:= $route }}
        ## start route: {{ $route.RouteName }}
        location = /{{ $route.RoutePath }} {
            rewrite ^/(.*)$ /$1/;
        }
        location /{{ $route.RoutePath }}/ {
            set $backend_name {{ $route.BackendName }};

            ## start blacklists
        {{- range $ip := $route.Annotations.Blacklist }}
            deny {{ $ip }};
        {{- end }}
            ## end blacklists

            ## start whitelists
        {{- range $ip := $route.Annotations.Whitelist }}
            allow {{ $ip }};
        {{- end}}

        {{- with $route.Annotations.Whitelist }}
            deny all;
        {{- end}}
            ## end whitelists

            access_by_lua_block {
                ngx.req.set_header("x-route-name", "{{ $route.RouteName }}")
                --## start limit traffic
        {{- with $route.Annotations.LimitTraffic }}
                local limit = require "balancer.limit"
            {{- with $route.Annotations.LimitTraffic.ReqRate }}
                limit.limit_req_handler({{ $route.Annotations.LimitTraffic.ReqRate }}, {{ $route.Annotations.LimitTraffic.ReqBurst }})
            {{- end }}

            {{- with $route.Annotations.LimitTraffic.ConnMax }}
                limit.limit_conn_handler({{ $route.Annotations.LimitTraffic.ConnMax }}, {{ $route.Annotations.LimitTraffic.ConnBurst }})
            {{- end }}
        {{- end }}
                --## end limit traffic

                --## start auth
        {{- with $route.Annotations.Auth.Enable }}
                local auth = require "balancer.auth"
            {{- if (eq $route.Annotations.Auth.AuthType "token") }}
                auth.auth_token("{{- $route.Annotations.Auth.Token }}")
            {{- else if (eq $route.Annotations.Auth.AuthType "basic") }}
                auth.auth_basic("{{- $route.Annotations.Auth.Username }}", "{{- $route.Annotations.Auth.Password }}")
            {{- else if (eq $route.Annotations.Auth.AuthType "request") }}
            {{- with $gateway.AuthRequest.Enable }}
                auth.auth_request("{{ $gateway.AuthRequest.AuthPath }}")
            {{- end }}
            {{- end }}
        {{- end }}
                --## end auth
            }

            ## start proxy config
            proxy_pass http://upstream_balancer/;
        {{- if ( eq $route.Annotations.Websocket "on" ) }}
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        {{- end }}

        {{- range $key, $value := $route.Annotations.ProxyHeader }}
            proxy_set_header {{ $key }} {{ $value }};
        {{- end }}

            proxy_set_header Host $host;
            ## end proxy config

        ## end route: {{ $route.RouteName }}
    {{- end }}


        }
    }
    ## end gateway: {{ $gateway.GatewayName }}
{{- end }}

    server {
        listen 9001;
        server_name _;
        location /configs {
            client_max_body_size 101m;
            client_body_buffer_size 101m;
            proxy_buffering off;
            content_by_lua_block {
                local config = require "balancer.config"
                config.call()
            }
        }
    }
}